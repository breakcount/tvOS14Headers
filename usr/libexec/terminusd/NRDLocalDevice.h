//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSCopying-Protocol.h"
#import "NSSecureCoding-Protocol.h"

@class NRDLDKeys, NSData, NSDate, NSString, NSUUID;

@interface NRDLocalDevice : NSObject <NSCopying, NSSecureCoding>
{
    _Bool _isRegistered;	// 8 = 0x8
    _Bool _isEnabled;	// 9 = 0x9
    _Bool _hasConfirmedClassDKeys;	// 10 = 0xa
    _Bool _hasConfirmedClassCKeys;	// 11 = 0xb
    _Bool _hasConfirmedClassAKeys;	// 12 = 0xc
    _Bool _usesSPPLink;	// 13 = 0xd
    _Bool _wasInitiallySetupUsingIDSPairing;	// 14 = 0xe
    _Bool _isAltAccountDevice;	// 15 = 0xf
    _Bool _lastSeenAlwaysOnWiFiSupported;	// 16 = 0x10
    _Bool _isEmptyPairing;	// 17 = 0x11
    _Bool _hasSavedClassCKeysInKeychain;	// 18 = 0x12
    _Bool _hasSavedClassAKeysInKeychain;	// 19 = 0x13
    unsigned short _lastSeenInnerLinkVersionHBO;	// 20 = 0x14
    NSUUID *_nrUUID;	// 24 = 0x18
    NSUUID *_bluetoothUUID;	// 32 = 0x20
    NRDLDKeys *_classDKeys;	// 40 = 0x28
    NRDLDKeys *_classCKeys;	// 48 = 0x30
    NSData *_receivedProxyNotifyPayload;	// 56 = 0x38
    NSData *_outOfBandKey;	// 64 = 0x40
    NSData *_bluetoothMACAddress;	// 72 = 0x48
    NSString *_lastSeenName;	// 80 = 0x50
    NSString *_lastSeenBuildVersion;	// 88 = 0x58
    long long _pairingProtocolVersion;	// 96 = 0x60
    NSDate *_dateCreated;	// 104 = 0x68
    NSDate *_dateRegistered;	// 112 = 0x70
    NSDate *_dateEnabled;	// 120 = 0x78
    NRDLDKeys *_classAKeys;	// 128 = 0x80
    NSData *_localInnerIPv6AddressBytesClassD;	// 136 = 0x88
    NSData *_remoteInnerIPv6AddressBytesClassD;	// 144 = 0x90
    NSData *_localInnerIPv6AddressBytesClassC;	// 152 = 0x98
    NSData *_remoteInnerIPv6AddressBytesClassC;	// 160 = 0xa0
}

+ (_Bool)updateRemoteClassCInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b2bc4
+ (_Bool)updateRemoteClassDInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b2854
+ (_Bool)updateLocalClassCInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b24e4
+ (_Bool)updateLocalClassDInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b2174
+ (void)writeSockAddrBytes:(struct sockaddr_in6 *)arg1 forEndpoint:(id)arg2;	// IMP=0x00000001000b1de0
+ (id)createTerminusPrefixEndpoint;	// IMP=0x00000001000b1d40
+ (id)createNewRemoteClassDAddrData;	// IMP=0x00000001000b1cd0
+ (id)createNewLocalClassDAddrData;	// IMP=0x00000001000b1c60
+ (id)createEndpointFromAddrData:(id)arg1 portString:(id)arg2;	// IMP=0x00000001000b1a04
+ (void)updateIsAltAccountDevice:(_Bool)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b1844
+ (void)updateReceivedProxyNotifyPayload:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b1600
+ (void)updateLastSeenAlwaysOnWiFiSupported:(_Bool)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b1440
+ (void)updateLastSeenBuildVersion:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b11fc
+ (void)updateLastSeenName:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b0fb8
+ (void)updateLastSeenInnerLinkVersionHBO:(unsigned short)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b0dfc
+ (void)ingestRemoteClassAKeysEncryptedWithIDS:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b0aac
+ (void)ingestRemoteClassCKeysEncryptedWithIDS:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b075c
+ (void)ingestRemoteClassDKeysEncryptedWithIDS:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b02a0
+ (void)ingestRemoteClassAKeys:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000aff74
+ (void)ingestRemoteClassCKeys:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000afc48
+ (void)ingestRemoteClassDKeys:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000af524
+ (void)queryPairingFromIDSKeysForNRUUID:(id)arg1 minDataProtectionClass:(unsigned char)arg2 completionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000af3d8
+ (void)queryPairingKeysForNRUUID:(id)arg1 minDataProtectionClass:(unsigned char)arg2 completionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000ae78c
+ (_Bool)hasEnabledSPPDevice;	// IMP=0x00000001000ae5d4
+ (id)copySPPMACAddressForNRUUID:(id)arg1;	// IMP=0x00000001000ae52c
+ (id)copyLocalDeviceForSPPMACAddress:(id)arg1;	// IMP=0x00000001000ae314
+ (_Bool)isEnabledSPPDeviceForMACAddress:(id)arg1;	// IMP=0x00000001000ae10c
+ (id)copyEnabledSPPBluetoothMACAddresses;	// IMP=0x00000001000adf1c
+ (id)copyEnabledSPPNRUUIDs;	// IMP=0x00000001000add58
+ (id)copyBestTestingNRUUID;	// IMP=0x00000001000adbb4
+ (_Bool)hasEnabledBluetoothDevice;	// IMP=0x00000001000ad9fc
+ (id)copyEnabledBluetoothUUIDs;	// IMP=0x00000001000ad80c
+ (id)copyEnabledAndCompletedPairingNRUUIDs;	// IMP=0x00000001000ad660
+ (id)copyEnabledNRUUIDs;	// IMP=0x00000001000ad4b4
+ (_Bool)hasEnabledDevice;	// IMP=0x00000001000ad328
+ (id)copyDeviceListString;	// IMP=0x00000001000ad12c
+ (void)disableDeviceWithNRUUID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ace40
+ (void)enableDeviceWithNRUUID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000acb54
+ (void)unregisterAllDevicesWithCompletionBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ac7c4
+ (void)unregisterDeviceWithNRUUID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ac2fc
+ (void)reportRegistrationFailureCode:(long long)arg1 errorDescription:(id)arg2 forNRUUID:(id)arg3;	// IMP=0x00000001000abe60
+ (void)confirmKeysForClass:(unsigned char)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000ab854
+ (void)registerDeviceWithNRUUID:(id)arg1 pairingProtocolVersion:(long long)arg2 wasInitiallySetupUsingIDSPairing:(_Bool)arg3 outOfBandKey:(id)arg4 pairWithSPPLink:(_Bool)arg5 isAltAccountPairing:(_Bool)arg6 bluetoothMACAddress:(id)arg7 completionBlock:(CDUnknownBlockType)arg8;	// IMP=0x00000001000ab07c
+ (void)removeAnalyticsForNRUUID:(id)arg1;	// IMP=0x00000001000ab010
+ (id)getAnalyticsForNRUUID:(id)arg1;	// IMP=0x00000001000aafac
+ (void)addAnalyticsForNRUUID:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000aaf1c
+ (id)copyNRUUIDForBluetoothUUID:(id)arg1;	// IMP=0x00000001000aae90
+ (id)copyLocalDeviceForBluetoothUUID:(id)arg1;	// IMP=0x00000001000aaaec
+ (id)copyLocalDeviceForNRUUID:(id)arg1 shouldCreate:(_Bool)arg2;	// IMP=0x00000001000aa93c
+ (id)copyLocalDeviceForNRUUID:(id)arg1;	// IMP=0x00000001000aa870
+ (id)newLocalDeviceWithRandomNRUUID;	// IMP=0x00000001000aa72c
+ (_Bool)supportsSecureCoding;	// IMP=0x00000001000aa724
+ (id)copyStatusString;	// IMP=0x00000001000aa4f4
+ (void)saveAllDevicesToDiskWithClassA;	// IMP=0x00000001000aa4a4
+ (void)saveAllDevicesToDisk;	// IMP=0x00000001000a9eec
+ (void)saveClassAKeysWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000a9b80
+ (void)loadClassAKeys;	// IMP=0x00000001000a98a0
+ (void)initializeLocalDeviceDatabaseIfNecessary;	// IMP=0x00000001000a9674
- (void).cxx_destruct;	// IMP=0x00000001000a8b04
@property(retain, nonatomic) NSData *remoteInnerIPv6AddressBytesClassC; // @synthesize remoteInnerIPv6AddressBytesClassC=_remoteInnerIPv6AddressBytesClassC;
@property(retain, nonatomic) NSData *localInnerIPv6AddressBytesClassC; // @synthesize localInnerIPv6AddressBytesClassC=_localInnerIPv6AddressBytesClassC;
@property(retain, nonatomic) NSData *remoteInnerIPv6AddressBytesClassD; // @synthesize remoteInnerIPv6AddressBytesClassD=_remoteInnerIPv6AddressBytesClassD;
@property(retain, nonatomic) NSData *localInnerIPv6AddressBytesClassD; // @synthesize localInnerIPv6AddressBytesClassD=_localInnerIPv6AddressBytesClassD;
@property(nonatomic) _Bool hasSavedClassAKeysInKeychain; // @synthesize hasSavedClassAKeysInKeychain=_hasSavedClassAKeysInKeychain;
@property(nonatomic) _Bool hasSavedClassCKeysInKeychain; // @synthesize hasSavedClassCKeysInKeychain=_hasSavedClassCKeysInKeychain;
@property(retain, nonatomic) NRDLDKeys *classAKeys; // @synthesize classAKeys=_classAKeys;
@property(retain, nonatomic) NSDate *dateEnabled; // @synthesize dateEnabled=_dateEnabled;
@property(retain, nonatomic) NSDate *dateRegistered; // @synthesize dateRegistered=_dateRegistered;
@property(retain, nonatomic) NSDate *dateCreated; // @synthesize dateCreated=_dateCreated;
@property(nonatomic) long long pairingProtocolVersion; // @synthesize pairingProtocolVersion=_pairingProtocolVersion;
@property(nonatomic) _Bool isEmptyPairing; // @synthesize isEmptyPairing=_isEmptyPairing;
@property(nonatomic) _Bool lastSeenAlwaysOnWiFiSupported; // @synthesize lastSeenAlwaysOnWiFiSupported=_lastSeenAlwaysOnWiFiSupported;
@property(retain, nonatomic) NSString *lastSeenBuildVersion; // @synthesize lastSeenBuildVersion=_lastSeenBuildVersion;
@property(retain, nonatomic) NSString *lastSeenName; // @synthesize lastSeenName=_lastSeenName;
@property(nonatomic) unsigned short lastSeenInnerLinkVersionHBO; // @synthesize lastSeenInnerLinkVersionHBO=_lastSeenInnerLinkVersionHBO;
@property(nonatomic) _Bool isAltAccountDevice; // @synthesize isAltAccountDevice=_isAltAccountDevice;
@property(nonatomic) _Bool wasInitiallySetupUsingIDSPairing; // @synthesize wasInitiallySetupUsingIDSPairing=_wasInitiallySetupUsingIDSPairing;
@property(retain, nonatomic) NSData *bluetoothMACAddress; // @synthesize bluetoothMACAddress=_bluetoothMACAddress;
@property(nonatomic) _Bool usesSPPLink; // @synthesize usesSPPLink=_usesSPPLink;
@property(retain, nonatomic) NSData *outOfBandKey; // @synthesize outOfBandKey=_outOfBandKey;
@property(retain, nonatomic) NSData *receivedProxyNotifyPayload; // @synthesize receivedProxyNotifyPayload=_receivedProxyNotifyPayload;
@property(nonatomic) _Bool hasConfirmedClassAKeys; // @synthesize hasConfirmedClassAKeys=_hasConfirmedClassAKeys;
@property(nonatomic) _Bool hasConfirmedClassCKeys; // @synthesize hasConfirmedClassCKeys=_hasConfirmedClassCKeys;
@property(nonatomic) _Bool hasConfirmedClassDKeys; // @synthesize hasConfirmedClassDKeys=_hasConfirmedClassDKeys;
@property(retain, nonatomic) NRDLDKeys *classCKeys; // @synthesize classCKeys=_classCKeys;
@property(retain, nonatomic) NRDLDKeys *classDKeys; // @synthesize classDKeys=_classDKeys;
@property(nonatomic) _Bool isEnabled; // @synthesize isEnabled=_isEnabled;
@property(nonatomic) _Bool isRegistered; // @synthesize isRegistered=_isRegistered;
@property(retain, nonatomic) NSUUID *bluetoothUUID; // @synthesize bluetoothUUID=_bluetoothUUID;
@property(retain, nonatomic) NSUUID *nrUUID; // @synthesize nrUUID=_nrUUID;
- (void)reportEvent:(int)arg1;	// IMP=0x00000001000a88c8
- (void)reportEvent:(int)arg1 detailsFormat:(id)arg2;	// IMP=0x00000001000a8834
- (void)reportEvent:(int)arg1 details:(id)arg2;	// IMP=0x00000001000a87c4
- (id)copyLocalInnerAddresses;	// IMP=0x00000001000a8688
- (id)copyLocalLinkLocalAddressString;	// IMP=0x00000001000a8620
- (void)writeRemoteClassCInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a84f8
- (void)writeRemoteClassDInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a83d0
- (void)writeRemoteClassCInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a8294
- (void)writeRemoteClassDInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a8158
- (void)writeLocalClassCInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a8030
- (void)writeLocalClassDInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a7f08
- (id)copyLocalInnerEndpointLinkLocal;	// IMP=0x00000001000a7e88
- (void)writeLocalClassCInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a7d4c
- (void)writeLocalClassDInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a7c10
- (id)copyRemoteAddressStrings;	// IMP=0x00000001000a7b38
- (id)copyRemoteClassCAddressString;	// IMP=0x00000001000a7ad0
- (id)copyRemoteClassDAddressString;	// IMP=0x00000001000a7a68
- (id)copyLocalClassCAddressString;	// IMP=0x00000001000a7a00
- (id)copyLocalClassDAddressString;	// IMP=0x00000001000a7998
- (id)copyRemoteClassCInnerEndpoint;	// IMP=0x00000001000a7954
- (id)copyRemoteClassDInnerEndpoint;	// IMP=0x00000001000a7910
- (id)copyLocalClassCInnerEndpoint;	// IMP=0x00000001000a78cc
- (id)copyLocalClassDInnerEndpoint;	// IMP=0x00000001000a7888
- (id)copyRemoteClassCInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a7698
- (id)copyRemoteClassDInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a74d4
- (id)copyLocalClassCInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a72e4
- (id)copyLocalClassDInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a7120
- (_Bool)hasReceivedRemoteClassCInnerAddress;	// IMP=0x00000001000a70d8
- (_Bool)hasReceivedRemoteClassDInnerAddress;	// IMP=0x00000001000a7090
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000001000a6a84
- (id)initWithCoder:(id)arg1;	// IMP=0x00000001000a5f7c
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000001000a575c
- (id)copyLongDescription;	// IMP=0x00000001000a469c
- (id)description;	// IMP=0x00000001000a4454
- (id)initWithNRUUID:(id)arg1;	// IMP=0x00000001000a4298
- (void)fillInClassAKeysWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000a40fc
- (void)fillInClassCKeysWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000a3f3c
- (void)fillInKeysForCurrentlyUnlockedWithForceClassA:(_Bool)arg1;	// IMP=0x00000001000a3950
- (_Bool)fillInClassDKeys;	// IMP=0x00000001000a370c
@property(readonly, nonatomic) _Bool hasOutOfBandKey;
- (id)copyKeys:(unsigned char)arg1;	// IMP=0x00000001000a35c0
@property(readonly, nonatomic) _Bool isEnabledAndHasCompletedPairing;
@property(readonly, nonatomic) _Bool hasCompletedPairing;

@end

